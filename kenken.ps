%!PS
% File: .kenken.ps
% Configuration / Setup

/Helvetica findfont 12 scalefont setfont
/cell_size 50 def
/x_op_offset 4 def
/y_op_offset 12 def

% Common shape definitions (digits = width,height)
/r2 { [ 2 (r) 1 (d) -2 (r) -1 (d) ] cage } def
/r3 { [ 3 (r) 1 (d) -3 (r) -1 (d) ] cage } def
/d2 { [ 1 (r) 2 (d) -1 (r) -2 (d) ] cage } def
/d3 { [ 1 (r) 3 (d) -1 (r) -3 (d) ] cage } def
/square  { [ 1 (r) 1 (d)  -1 (r)  -1 (d) ] cage } def
/square2 { [ 2 (r) 2 (d)  -2 (r)  -2 (d) ] cage } def

/L13   { [ 1 (r) 2 (d)  1 (r)  1 (d) -2 (r) -3 (d) ] cage } def
/BUL13 { [ 2 (r) 3 (d)  -1 (r)  -2 (d) -1 (r) -1 (d) ] cage } def  % Backwards Upside-down L
/L22   { [ 1 (r) 1 (d)  1 (r)  1 (d) -2 (r) -2 (d) ] cage } def
/UL22  { [ 2 (r) 1 (d)  -1 (r)  1 (d) -1 (r) -2 (d) ] cage } def  % Upside-down L
/UL32  { [ 3 (r) 1 (d)  -2 (r)  1 (d) -1 (r) -2 (d) ] cage } def  % Upside-down L
/BL22  { [ 1 (r) 2 (d)  -2 (r)  -1 (d) 1 (r) -1 (d) ] cage } def  % Backwards L
/BL23  { [ 1 (r) 2 (d)  -3 (r)  -1 (d) 2 (r) -1 (d) ] cage } def  % Backwards L
/BUL22 { [ 2 (r) 2 (d) -1 (r) -1 (d) -1 (r) -1 (d) ] cage } def  % Backwards Upside-down L
/BUL32 { [ 3 (r) 2 (d) -1 (r) -1 (d) -2 (r) -1 (d) ] cage } def  % Backwards Upside-down L
%  L22=*    UL22=**   BL22= *  BUL22=**
%      **        *         **         *

/T1 { [ 3 (r) 1 (d) -1 (r) 1 (d) -1 (r) -1 (d) -1 (r) -1 (d) ] cage } def
/T2 { [ 1 (r) 3 (d) -1 (r) -1 (d) -1 (r) -1 (d) 1 (r) -1 (d) ] cage } def
/T3 { [ 1 (r) 1 (d) 1 (r) 1 (d) -3 (r) -1 (d) 1 (r) -1 (d) ] cage } def
/T4 { [ 1 (r) 1 (d) 1 (r) 1 (d)    -1 (r) 1 (d) -1 (r) -3 (d) ] cage } def
%  T1=***    T2=  *   T3= *   T4=*
%      *        * *      ***     **
%                 *              *


/cage {
        /shape exch def  % Array [ Pairs of Number-of-Units and Direction='R|D', ... ]
        /cell0 exch def  % Counting from top-left to lower-right (0..N)
        /op exch def     % Value-Operation (eg: 3+, 6x, 10+, 1-)

        % /x cell0    grid_size mod 1 add cell_size mul def
        % /y cell0    grid_size idiv 1 add cell_size mul cell_size add def
        /x cell0 grid_size mod 1 add cell_size mul def
        /y cell0 grid_size idiv neg cell_size mul def

        x x_op_offset add  y y_op_offset sub  moveto op show
        x y moveto
        4 setlinewidth
        1 2 shape length {
                1 sub dup
                /n_cells exch shape exch get def
                /dir exch 1 add shape exch get def
                dir (r) eq {
                        /x x n_cells cell_size mul add def  % Right/Left
                } {
                        /y y n_cells cell_size mul sub def  % Down/Up
                } ifelse
                x y lineto
        } for stroke
} def


/grid {
        /grid_size exch def
        1 setlinewidth
        0 1 grid_size dup mul 1 sub {
                /cell_num exch def
                /x cell_num grid_size mod 1 add cell_size mul def
                /y cell_num grid_size idiv neg cell_size mul def
                x y moveto
                x cell_size add y lineto
                x cell_size add y cell_size sub lineto
                x y cell_size sub lineto
                x y lineto
        } for
        closepath stroke
} def

% End Configuration / Setup -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
